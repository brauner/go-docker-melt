Note: There can be multiple images in a single tar-file.

Files to account for:
1. global files
Global files are found in the root of the tar file.

1.1. manifest.json
This file is unique. In JSON it is implemented as an array [] of objects. Each
object {} has the following structure:

1.1.1. The structure of `manifest.json` files

1.1.1.1. `json:"Config"`
string: contains name of the json config file

1.1.1.2. `json:"RepoTags"`
array of strings: An array that lists all tags associated with the image.

1.1.1.3. `json:"Layers"`
array of strings: An array that lists all layers forming this image in sorted
order (root-layer first).

1.1.2. The representation of `manifest.json` in `go`
We represent this file in go as a slice of structs. Where the definition of the
struct is:

```
type ManifestJSON struct {
	Config   string   `json:"Config,omitempty"`
	RepoTags []string `json:"RepoTags,omitempty"`
	Layers   []string `json:"Layers,omitempty"`
}
```

and we create a slice of strucs:

```
var manifest []ManifestJSON
```

1.2. sha-hash.json
This file is not unique whenever the tar-file contains multiple images. Each
file s implemented in JSON as an object {}. This object {} has the following
structure:

1.2.1. The structure of `256hash.json` files

1.2.1.1. `json:"architecture"`
string: amd64 etc.

1.2.1.2. `json:"config"`
object:

1.2.1.2.1 The structure of the object ``json:"config"``

1.2.1.2.1.1. `json:"Hostname"`
string: Hostname of the image.

1.2.1.2.1.2. `json:"Domainname"`
string: Domainname of the image.

1.2.1.2.1.3. `json:"User"`
At the time of writing I suspect this is a string.
string: Name of the user.

1.2.1.2.1.4. `json:"AttachStdin"`
bool: Whether stdin should be attached.

1.2.1.2.1.5. `json:"AttachStdout"`
bool: Whether stdout should be attached.

1.2.1.2.1.6. `json:"AttachStderr"`
bool: Whether stderr should be attached.

1.2.1.2.1.7. `json:"Tty"`
bool: At the time of writing I suspect this indicates whether a tty is
associated with the image.

1.2.1.2.1.8. `json:"OpenStdin"`
bool: Whether stdin should be opened.

1.2.1.2.1.9. `json:"StdinOnce"`
bool: At the time of writing its meaning is not entirely clear to me.

1.2.1.2.1.10. `json:"Env"`
array of strings: List of environment variables and their associated values.

1.2.1.2.1.11. `json:"Cmd"`
array of strings: List of the command and its arguments.

1.2.1.2.1.12. `json:"Image"`
string: sha-hash. At the time of writing its meaning is not entirely clear to
me.

1.2.1.2.1.13. `json:"Volumes"`
array of strings: List of Volumes associated with this image.

1.2.1.2.1.14. `json:"WorkingDir"`
string: Current working directory.

1.2.1.2.1.15. `json:"Entrypoint"`
array of strings: List of the command and its arguments.

1.2.1.2.1.16. `json:"OnBuild"`
array of strings: See the ONBUILD instruction explanation on the Docker
homepage.

1.2.1.2.1.17. `json:"Labels"` (currently ommitted)
array of strings (or object?): Labels in <key>/<value> format associated with
this image.

1.2.1.3. `json:"container"`
string: sha-hash. At the moment of writing its meaning is not entirely clear to
me.

1.2.1.4. `json:"container_config"`
object: At the moment of writing its meaning is not entirely clear to me.

1.2.1.4.1 The structure of the object ``json:"container_config"``
Structurally identical to `json:"config"` described under  1.2.1.2.1

1.2.1.5. `json:"created"`
string: iso date indicating when the image was created.

1.2.1.6. `json:"docker_version"`
string: docker version with which this image was created.

1.2.1.7. `json:"history"`
array of objects

1.2.1.7.1 The structure of the object in the array of object ``json:"history"``

1.2.1.7.1.1 `json:"created"`
string: iso date

1.2.1.7.1.2 `json:"created_by"`
string: instruction that was executed at the timepoint given in `json:"created"`

1.2.1.8. `json:"os"`
string: Name of the operating system of this image (e.g. linux).

1.2.1.9. `json:"rootfs"`
object

1.2.1.9.1 The structure of the object `json:"rootfs"`

1.2.1.9.1.1. `json:"type"`
string:

1.2.1.9.1.2. `json:"diff_ids"`
array of strings:

1.2.2. The representation of `sh256.json` in `go`
```
type ImageConfig struct {
	Arch            string         `json:"architecture,omitempty"`
	Config          *genericConfig `json:"config,omitempty"`
	Container       string         `json:"container,omitempty"`
	ContainerConfig *genericConfig `json:"container_config,omitempty"`
	Created         string         `json:"created,omitempty"`
	DockerVersion   string         `json:"docker_version,omitempty"`
	History         []History      `json:"history,omitempty"`
	OS              string         `json:"os,omitempty"`
	Rootfs          *Rootfs        `json:"rootfs,omitempty"`
}
```

The overall representation of `json:"config"` is given via an array of
`ImageConfig` structs:
```
var imageConfig []ImageConfig
```

The structs used to represent the objects `json:"container_config"`,
`json:"config"`, `json:"history"`, and `json:"rootfs"` are given below.


1.2.2.1. The representation of `json:"config"` in `go`

```
type genericConfig struct {
	Hostname     string      `json:"Hostname,omitempty"`
	Domainname   string      `json:"Domainname,omitempty"`
	User         string      `json:"User,omitempty"`
	AttachStdin  bool        `json:"AttachStdin,omitempty"`
	AttachStdout bool        `json:"AttachStdout,omitempty"`
	AttachStderr bool        `json:"AttachStderr,omitempty"`
	Tty          bool        `json:"Tty,omitempty"`
	OpenStdin    bool        `json:"OpenStdin,omitempty"`
	StdinOnce    bool        `json:"StdinOnce,omitempty"`
	Env          []string    `json:"Env,omitempty"`
	Cmd          []string    `json:"Cmd,omitempty"`
	Image        string      `json:"Image,omitempty"`
	Volumes      []string    `json:"Volumes,omitempty"`
	WorkingDir   string      `json:"WorkingDir,omitempty"`
	Entrypoint   []string    `json:"Entrypoint,omitempty"`
	OnBuild      []string    `json:"OnBuild,omitempty"`
	Labels       interface{} `json:"Labels,omitempty"`
}
```

1.2.2.2. The representation of `json:"container_config"` in `go`
Identical to the representation of `json:"config"` found under 1.2.2.1.

1.2.2.3. The representation of `json:"rootfs"` in `go`
```
type Rootfs struct {
	Type    string   `json:"type,omitempty"`
	DiffIds []string `json:"diff_ids,omitempty"`
}
```

1.2.2.4. The representation of `json:"history"` in `go`
```
type History struct {
	Created   string `json:"created,omitempty"`
	CreatedBy string `json:"created_by,omitempty"`
}
```

2. Layer-specific files

2.1  sha-hash/json
These files are unique per layer. Overall, they closely resemble the
sha-hash.json image config files explained under 1.2. Still, we keep them
separate for know and represent them with different structs. For simplicity
future modifications might merge them into one.

2.1.1. The structure of `sha-hash/json` files

2.1.1.1. `json:"id,omitempty"`
string: sha-sum identifier of the layer.

2.1.1.2. `json:"parent,omitempty"`
string: Indicating the ancestor of the layer.

2.1.1.3. `json:"created,omitempty"`
string: iso-date indicating the timepoint when this image was created.

2.1.1.4. `json:"container,omitempty"`
string: sha-hash. At the moment of writing its meaning is not entirely clear to
me.

2.1.1.5. `json:"container_config,omitempty"`
object: At the moment of writing its meaning is not entirely clear to me.

2.1.1.5.1 The structure of the object ``json:"container_config"``
Structurally identical to `json:"config"` described under  1.2.1.2.1


2.1.1.6. `json:"docker_version,omitempty"`

2.1.1.7. `json:"config,omitempty"`
object:

2.1.1.7.1 The structure of the object ``json:"config"``
Structurally identical to `json:"config"` described under  1.2.1.2.1

2.1.1.8. `json:"architecture,omitempty"`
string: amd64 etc.

2.1.1.9. `json:"os,omitempty"`
string: Name of the operating system of this image (e.g. linux).

2.1.2. The representation of `sha-hash/json` in `go`
We represent this file as a slice of nested structs. Where the struct has the
definition:

```
type LayerJSON struct {
	Id              string         `json:"id,omitempty"`
	Parent          string         `json:"parent,omitempty"`
	Created         string         `json:"created,omitempty"`
	Container       string         `json:"container,omitempty"`
	ContainerConfig *genericConfig `json:"container_config,omitempty"`
	DockerVersion   string         `json:"docker_version,omitempty"`
	Config          *genericConfig `json:"config,omitempty"`
	Arch            string         `json:"architecture,omitempty"`
	OS              string         `json:"os,omitempty"`
}
```

and we represent the whole file as:
```
var layerJSON []LayerJSON
```

Problem:
- It is unpredictable what keys will be present in the json aside from the
standard keys listed above. We need to find a way to store those keys.
- Spec:
	- We want to avoid unmarshalling multiple times.
- Current best solution:
	- set up structs for data fields we are interested in and of which we
	know that they are there.
	- keep a filed rawJSON []byte in those structs that stores the raw json
	data
	- This allows us to work with the fields of interest to us. When we are
	done we will make the changes to the raw json data


Keep members in the struct we might like to modify.

Things we need to change to get a docker load loadable-image:
	- remove Layers from manifest.json
	- remove History from image config
	- remove rootfs diff_ids from rootfs

How to untar files?
	- untar files in their own directory directly:
		- remove all files, only leave "layer.tar" file behind.
		- untar "layer.tar" file in the current directory
		- unlink "layer.tar"

Bonus:
	- Accounting for shared layers:
		- everything the same as above except:
			- keep single shared layers
			- melt sequences of shared layers
			- branch at shared layers
			- find the first diverging layer and branch from there

Problem 1: Can it be that two images share a sequence of layers, branch with
different layers but share another sequence of layers again? I.e.
Image1:
	- layer_yellow	// shared sequentially
	- layer_red	// shared sequentially
	- layer_green	// shared sequentially
	- layer_black
	- layer_orange	// shared sequentially
	- layer_grey	// shared sequentially

Image1:
	- layer_yellow	// shared sequentially
	- layer_red	// shared non-sequentially
	- layer_green	// shared non-sequentially
	- layer_white
	- layer_orange	// shared non-sequentially
	- layer_grey	// shared non-sequentially

If this is possible the current version of docker-melt will not deal with this
correctly.

Problem 2:
Can it be that two images share layers non-sequentially? I.e.
Image1:
	- layer_yellow	// shared sequentially
	- layer_red	// shared non-sequentially
	- layer_black
	- layer_green	// shared non-sequentially

Image1:
	- layer_yellow	// shared sequentially
	- layer_orange
	- layer_green	// shared non-sequentially
	- layer_grey
	- layer_red	// shared non-sequentially

If this is possible the current version of docker-melt will not deal with this
correctly.

Question: Is there a sequence of unique layers that licenses unpacking? (Done)
	- We check that before we're unpacking any layers. But we only check if
	  we found multiple images in the tar file, i.e. when we found multiple
	  "config" objects in the manifest.json file.
	- Note that this check might actually not be necessary since we can
	  expect that images that share all of their layers are not treated as
	  separate images and hence, do not have a separate "config" entry in
	  the manifest.json file. Rather, they should appear as tags for the
	  same image. (So maybe we can remove that check. Haven't made up my
	  mind yet.)

A case where we don't want to untar:
Image1:
	- layer_yellow
	- layer_red
	- layer_white

Image2:
	- layer_yellow
	- layer_red
	- layer_orange

Cases when we don't want to untar (Exhaustive?):
1. When the first shared layer is immediately followed by a unique layer.
Image1:
	- layer_yellow	// shared layer
	- layer_white
	- layer_grey

Image2:
	- layer_yellow	// shared layer
	- layer_red
	- layer_black


2. When the last layer is unique and has a shared layer preceding it.
Image1:
	- layer_yellow	// shared layer
	- layer_white

Image2:
	- layer_yellow	// shared layer
	- layer_red

So we need to check two things before untaring:
	- is the last layer unique and was the previous layer shared?
		- yes
			--> do not untar
		- no
			--> untar

Checks to be executed if we have multiple images in a tar file:
	- Is the current layer unique and the preceeding layer shared?
		- yes --> not ok to melt cur into prev
		- no  --> ok to melt cur into prev
